<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
            http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- 基本配置 -->
    <groupId>...</groupId>
    <artifactId>...</artifactId>
    <version>...</version>
    <packaging>...</packaging>


    <!-- 依赖配置 -->
    <dependencies>...</dependencies>
    <parent>...</parent>
    <dependencyManagement>...</dependencyManagement>
    <modules>...</modules>
    <properties>...</properties>

    <!-- 构建配置 -->
    <build>...</build>
    <reporting>...</reporting>

    <!-- 项目信息 -->
    <name>...</name>
    <description>...</description>
    <url>...</url>
    <inceptionYear>...</inceptionYear>
    <licenses>...</licenses>
    <organization>...</organization>
    <developers>...</developers>
    <contributors>...</contributors>

    <!-- 环境设置 -->
    <issueManagement>...</issueManagement>
    <ciManagement>...</ciManagement>
    <mailingLists>...</mailingLists>
    <scm>...</scm>
    <prerequisites>...</prerequisites>
    <repositories>...</repositories>
    <pluginRepositories>...</pluginRepositories>
    <distributionManagement>...</distributionManagement>
    <profiles>...</profiles>
</project>

<project xmlns="http://maven.apache.org/POM/4.0.0"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
   http://maven.apache.org/xsd/maven-4.0.0.xsd">
   <!-- pom模型版本，maven2和3只能为4.0.0-->
   <modelVersion>4.0.0</modelVersion>
   <!-- 项目的组ID，用于maven定位-->
   <groupId>com.company.bank</groupId>
   <!-- 项目ID，通常是项目的名称,唯一标识符-->
   <artifactId>parent</artifactId>
   <!-- 项目的版本-->
   <version>1.0</version>
   <!-- 项目的打包方式-->
   <packaging>war</packaging>
<project>

<build>    
    <!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。        -->
    <sourceDirectory/>    
    <!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。        -->
  <scriptSourceDirectory/>    
  <!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。        -->
  <testSourceDirectory/>    
  <!--被编译过的应用程序class文件存放的目录。        -->
  <outputDirectory/>    
  <!--被编译过的测试class文件存放的目录。        -->
  <testOutputDirectory/>    
  <!--使用来自该项目的一系列构建扩展        -->
  <extensions>    
   <!--描述使用到的构建扩展。        -->
   <extension>    
    <!--构建扩展的groupId        -->
    <groupId/>    
    <!--构建扩展的artifactId        -->
    <artifactId/>    
    <!--构建扩展的版本        -->
    <version/>    
   </extension>    
  </extensions>    
  <!--当项目没有规定目标（Maven2 叫做阶段）时的默认值        -->
  <defaultGoal/>    
  <!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。        -->
  <resources>    
   <!--这个元素描述了项目相关或测试相关的所有资源路径        -->
   <resource>    
    <!-- 描述了资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。举个例 子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。        -->
    <targetPath/>    
    <!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。        -->
    <filtering/>    
    <!--描述存放资源的目录，该路径相对POM路径        -->
    <directory/>    
    <!--包含的模式列表，例如**/*.xml.        -->
    <includes/>    
    <!--排除的模式列表，例如**/*.xml        -->
    <excludes/>    
   </resource>    
  </resources>    
  <!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。	        -->
  <testResources>    
   <!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明	        -->
   <testResource>    
    <targetPath/><filtering/><directory/><includes/><excludes/>    
   </testResource>    
  </testResources>    
  <!--构建产生的所有文件存放的目录        -->
  <directory/>    
  <!--产生的构件的文件名，默认值是${artifactId}-${version}。	        -->
  <finalName/>    
  <!--当filtering开关打开时，使用到的过滤器属性文件列表	        -->
  <filters/>    
  <!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置	        -->
  <pluginManagement>    
   <!--使用的插件列表 。	        -->
   <plugins>    
    <!--plugin元素包含描述插件所需要的信息。        -->
    <plugin>    
     <!--插件在仓库里的group ID        -->
     <groupId/>    
     <!--插件在仓库里的artifact ID        -->
     <artifactId/>    
     <!--被使用的插件的版本（或版本范围）        -->
     <version/>    
     <!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。        -->
     <extensions/>    
     <!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。        -->
     <executions>    
      <!--execution元素包含了插件执行需要的信息        -->
      <execution>    
       <!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标        -->
       <id/>    
       <!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段        -->
       <phase/>    
       <!--配置的执行目标        -->
       <goals/>    
       <!--配置是否被传播到子POM        -->
       <inherited/>    
       <!--作为DOM对象的配置        -->
       <configuration/>    
      </execution>    
     </executions>    
     <!--项目引入插件所需要的额外依赖        -->
     <dependencies>    
      <!--参见dependencies/dependency元素        -->
      <dependency>    
       ......    
      </dependency>    
     </dependencies>         
     <!--任何配置是否被传播到子项目        -->
     <inherited/>    
     <!--作为DOM对象的配置        -->
     <configuration/>    
    </plugin>    
   </plugins>    
  </pluginManagement>    
  <!--使用的插件列表        -->
  <plugins>    
   <!--参见build/pluginManagement/plugins/plugin元素        -->
   <plugin>    
    <groupId/><artifactId/><version/><extensions/>    
    <executions>    
     <execution>    
      <id/><phase/><goals/><inherited/><configuration/>    
     </execution>    
    </executions>    
    <dependencies>    
     <!--参见dependencies/dependency元素 -->
     <dependency>    
      ......    
     </dependency>    
    </dependencies>    
    <goals/><inherited/><configuration/>    
   </plugin>    
  </plugins>    
 </build>

作者：暗剑伤人
链接：https://www.jianshu.com/p/0e3a1f9c9ce7
来源：简书
简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。